---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: nginx # Change the security group name here
      image: ami-43a15f3e # Change the AMI, from which you want to launch the server
      region: us-east-1 # Change the Region
      keypair: ansible-test # Change the keypair name
      count: 1
      
    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0


      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22
                      delay=60
                      timeout=320 
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_dns_name }}
                      insertafter="[webserver]" line={{ item.public_dns_name }}
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver

  - name: Install Nginx
    hosts: testserver
    gather_facts: false
    become: true
    vars:
       http_port: "{{ lookup('env','HTTP_PORT') | default('80',true) }}"
       https_port: "{{ lookup('env','HTTPS_PORT') | default('443',true) }}"
       site_name: "{{ lookup('env','SITE_NAME') | default('nginx_site',true) }}"
       nginx_ssl_dir: "{{ lookup('env','SSL_DIR') | default('/etc/nginx/ssl',true) }}"
    pre_tasks:
      - name: 'install python2'
        raw: sudo apt-get -y install python-simplejson
    tasks:
    - name: Nginx
      apt: 
        pkg: nginx
        state: present
      sudo: yes

    # Set up new site
    - name: configuring nginx site directory
      command: rm -rf /etc/nginx/sites-enabled/default
      sudo: yes

    - name: adding webpage 
      template: src=templates/index.html dest=/var/www/index.html
      notify: restart nginx
      sudo: yes
    - name: configure nginx site config file
      template: src=templates/default dest=/etc/nginx/sites-enabled/default owner=root group=root mode=0644
      notify: restart nginx
      sudo: yes
    # Generate a self signed certificate for the web service
    - name: ensuring openssl is present
      apt:
        pkg: openssl
        state: present
      sudo: yes
    - name: creating nginx ssl directory
      file: path={{nginx_ssl_dir}} state=directory owner=root group=root mode=0775 recurse=yes
      sudo: yes

    - name: generate self signed certificate
      command: openssl req -new -nodes -x509 -subj "/C=US/ST=US/L=US/O=\'{{site_name}}\'/OU=Self Signed/CN=\'{{site_name}}\'" -days 3650 -keyout {{nginx_ssl_dir}}/{{site_name}}.key -out {{nginx_ssl_dir}}/{{site_name}}.crt -extensions v3_ca creates={{nginx_ssl_dir}}/{{site_name}}.crt
      notify: restart nginx
      sudo: yes
    # Patch the nginx config file to enable SSL
#    - name: enabling ssl
#      replace: 
#        dest: /etc/nginx/conf.d/nginx_site.conf
#        regexp: '{{ item.regexp }}'
#        replace: '{{ item.replace }}'
#        owner: root
#        group: root
#        mode: 644
#      with_items:
#        - { regexp: '#listen', replace: 'listen' }
#        - { regexp: '#ssl_certificate_key', replace: 'ssl_certificate_key' }
#        - { regexp: '#ssl_certificate', replace: 'ssl_certificate' }
#        - { regexp: '#ssl', replace: 'ssl' }
#      notify: restart nginx
#      sudo: yes
    handlers:
     - name: restart nginx
       service: name=nginx state=restarted
